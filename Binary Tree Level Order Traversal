/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*> q;
        vector<vector<int>> res;
        if(!root) return {};
        q.push(root);
        
        while(!q.empty()) {
            vector<int> out;
            int qsize= q.size();
            for(int i=0;i<qsize; i++) {
                TreeNode* node=q.front(); 
                q.pop();
                out.push_back(node->val);
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            res.push_back(out);
            
        }
        return res;
    }
};

class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        if(!root) return {};
        vector<vector<int>> res;
        queue<TreeNode*> q;
        q.push(root);
        
        while(!q.empty()) {
            vector<int> out;
            int qsize = q.size();
            for(int i=0; i<qsize; i++) {
                TreeNode *node=q.front();
                q.pop();
                out.push_back(node->val);
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            res.insert(res.begin(), out);
        }
        return res;
    }
};

class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        stack<TreeNode*> s1,s2;
        if(!root) return {};
        vector<vector<int>> res;
        s1.push(root);
        
        while(!s1.empty()) {
            vector<int> out;
            int q1=s1.size();
            for(int i=0;i<q1;i++) {
                TreeNode* node=s1.top(); 
                s1.pop();
                out.push_back(node->val);
                if(node->left) s2.push(node->left);
                if(node->right) s2.push(node->right);
            }
            res.push_back(out);
            out.clear();
            if(s2.empty()) break;
            int q2=s2.size();
            for(int i=0;i<q2; i++) {
                TreeNode* node=s2.top(); 
                s2.pop();
                out.push_back(node->val);
                if(node->right) s1.push(node->right);
                if(node->left) s1.push(node->left);
            }
            res.push_back(out);
        }
        return res;
    }
};
