https://leetcode.com/problems/invert-binary-tree/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if (!root) return NULL;
        TreeNode* node = root->left;
        root->left = invertTree(root->right);
        root->right = invertTree(node);
        return root;
    }
};

https://leetcode.com/problems/validate-binary-search-tree/submissions/
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        if(!root) return true;
        return helper(root, LONG_MIN, LONG_MAX);
    }
    bool helper(TreeNode* root, long left, long right)
    {
        if(!root) return true;
        if(root->val<=left || root->val>=right)
            return false;
        return helper(root->left, left, root->val)&& helper(root->right, root->val, right);
    }
};
