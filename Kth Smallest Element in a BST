https://leetcode.com/problems/kth-smallest-element-in-a-bst
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode*> s;
        int cnt = 0;
        TreeNode* p = root;
        while (p || !s.empty()) {
            while (p) {
                s.push(p);
                p = p ->left;
            }
            p = s.top(); s.pop();
            ++cnt;
            if (cnt == k) return p->val;
            p = p->right;
        }
        return -1;
    }
};

https://leetcode.com/problems/closest-binary-search-tree-value-ii/
class Solution {
public:
    vector<int> closestKValues(TreeNode* root, double target, int k) {
        stack<TreeNode*> st;
        TreeNode* p = root;
        vector<int> res;
        vector<vector<double>> arr;
        
        while(p || !st.empty()) {
            while (p) {
                st.push(p);
                p = p->left;
            }
            if (!st.empty()) {
                auto t = st.top(); st.pop();
                arr.push_back({abs(t->val - target), (double)t->val});
                t = t->right;
                p = t;
            }
        }
        sort(arr.begin(), arr.end());
        for (int i = 0; i < k; i++) {
            res.push_back((int)arr[i][1]);
        }
        return res;
    }
};

https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/submissions/
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (!root || root == p || root == q) return root;
        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        TreeNode* right = lowestCommonAncestor(root->right, p, q);
        if (left && right) return root;
        return !left? right : left;
    }
};
