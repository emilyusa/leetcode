https://leetcode.com/problems/letter-combinations-of-a-phone-number/
class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> dict = {"", "", "abc", "def", "ghi", "jkl", "mno", "oqrs", "tuv", "wxyz"};
        vector<string> res;
        string out;
        helper(digits, 0, out, res, dict);
        return res;
    }
    void helper(string digits, int idx, string out, vector<string>& res, vector<string>& dict) {
        if (idx == digits.size()) {
            res.push_back(out);
            return;
        }
        for (auto ch : dict[digits[idx] - '0']) {
            out += ch;
            helper(digits, idx + 1, out, res, dict);
            out.pop_back();
        }
    }
};

https://leetcode.com/problems/word-pattern-ii/submissions/
class Solution {
public:
    unordered_map<char, string> pDict;
    unordered_map<string, char> sDict;
    bool wordPatternMatch(string pattern, string s) {
        return helper(pattern, 0, s, 0);
    }
    bool helper(string& pattern, int i, string& str, int j) {
        int m = pattern.size();
        int n = str.size();
        if (i == m || j == n) {
            if (i == m && j == n) return true;
            return false;
        }
        bool ins = false;
        for (int k = j; k < n; k++) {
            string s = str.substr(j, k - j + 1);
            if (pDict.find(pattern[i]) != pDict.end()) {
                if (pDict[pattern[i]] != s) continue;
            } else if (sDict.find(s) != sDict.end()) {
                if (sDict[s] != pattern[i]) continue;
            } else {
                pDict[pattern[i]] = s;
                sDict[s] = pattern[i];
                ins = true;
            }
            if (helper(pattern, i + 1, str, k+1)) return true;
            if (ins) {
                pDict.erase(pattern[i]);
                sDict.erase(s);
            }
        }
        return false;
    }
};

https://leetcode.com/problems/word-ladder-ii/submissions/
class Solution {
public:
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> dict(wordList.begin(), wordList.end());
        vector<vector<string>> ans;
        queue<vector<string>> q;
        q.push({beginWord});
        int level = 1, minlevel = INT_MAX;
        unordered_set<string> visit;
        
        while(!q.empty()) {
            vector<string> path = q.front(); q.pop();
            if (path.size() > level) {
                for (auto str : visit) dict.erase(str);
                visit.clear();
                if (path.size() > minlevel) break;
                else
                    level = path.size();
            }
            string last = path.back();
            for (int i = 0; i < last.size(); i++) {
                string newstr = last;
                for(char c = 'a'; c <= 'z'; c++) {
                    newstr[i] = c;
                    if (dict.count(newstr)) {
                        vector<string> newpath = path;
                        newpath.push_back(newstr);
                        visit.insert(newstr);
                        if (newstr == endWord) {
                            minlevel = level;
                            ans.push_back(newpath);
                        } else
                            q.push(newpath);
                        
                    }
                }
            }
        }
        return ans;
    }
};
