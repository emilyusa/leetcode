
https://www.lintcode.com/problem/split-string/descriptionclass Solution {
public:
    /*
     * @param : a string to be split
     * @return: all possible split string array
     */
    vector<vector<string>> splitString(string& s) {
        // write your code here
        vector<string> out;
        vector<vector<string>> res;
        helper(s, 0, out, res);
        return res;
    }
    void helper(string& s, int idx, vector<string>& out, vector<vector<string>>& res) {
        if (idx >= s.size()) {
            res.push_back(out);
            return;
        }
        for (int i = 1; i <= 2; i++) {
            if ( idx+i <= s.size()) {
                out.push_back(s.substr(idx, i));
                helper(s, idx + i, out, res);
                out.pop_back();
            }
        }
    }
};

https://leetcode.com/problems/palindrome-partitioning/submissions/
class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> out;
        helper(s, 0, out, res);
        return res;
    }
    void helper(string& s, int idx, vector<string>& out, vector<vector<string>>& res) {
        if (idx >= s.size()) {
            res.push_back(out);
            return;
        }
        for (int i = idx; i < s.size(); i++) {
            if (isValid(s, idx, i)) {
                out.push_back(s.substr(idx,i - idx + 1));
                helper(s, i+1, out, res);
                out.pop_back();
            }
        }
    }
private:
    bool isValid(string& s, int idx, int i) {
        while(idx <= i) {
            if (s[idx] != s[i]) return false;
            idx++;
            i--;
        }
        return true;
    }
};
