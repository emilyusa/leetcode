https://leetcode.com/problems/insert-into-a-binary-search-tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if (!root) return new TreeNode(val);
        if (val < root->val)
            root->left = insertIntoBST(root->left, val);
        else
            root->right = insertIntoBST(root->right, val);
        return root;
    }
};

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

https://www.lintcode.com/problem/remove-node-in-binary-search-tree
class Solution {
public:
    /*
     * @param root: The root of the binary search tree.
     * @param value: Remove the node with given value.
     * @return: The root of the binary search tree after removal.
     */
    TreeNode * removeNode(TreeNode * root, int value) {
        // write your code here
        if(!root) return NULL;
        if(root->val == value) {
            if(!root->right)
                return root->left;
            else {
                TreeNode *cur = root->right;
                while (cur->left) {
                    cur = cur->left;
                }
                swap(root->val, cur->val);
            }
        }
        root->left = removeNode(root->left, value);
        root->right = removeNode(root->right, value);
        return root;
    }
};

class Solution {
public:
    int closestValue(TreeNode* root, double target) {
        int a = root->val;
        auto kid = target < a? root->left : root->right;
        if (!kid) return a;
        int b = closestValue(kid, target);
        return abs(a - target) < abs(b - target)? a : b;
    }
};

