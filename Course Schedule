https://leetcode.com/problems/course-schedule/
class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> in(numCourses);
        vector<vector<int>> g(numCourses);
        for(auto p: prerequisites) {
            in[p[0]]++;
            g[p[1]].push_back(p[0]);
        }
        queue<int> q;
        for(int i = 0; i < in.size(); i++) {
            if(in[i] == 0)
                q.push(i);
        }
        while(!q.empty()) {
            auto t = q.front(); q.pop();
            for(auto nei : g[t]) {
                in[nei]--;
                if(in[nei] == 0)
                    q.push(nei);
            }
        }
        for(int i : in) {
            if(i != 0) return false;
        }
        return true;
    }
};

https://leetcode.com/problems/course-schedule-ii/submissions/
class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> res;
        vector<vector<int>> g(numCourses, vector<int>(0));
        vector<int> in(numCourses);
        for(auto a: prerequisites) {
            g[a[1]].push_back(a[0]);
            ++in[a[0]];
        }
        queue<int> q;
        for(int i = 0; i < numCourses; ++i) {
            if(in[i] == 0) q.push(i);
        }
        while(!q.empty()) {
            int t = q.front(); q.pop();
            res.push_back(t);
            for(auto a : g[t]) {
                --in[a];
                if(in[a] == 0) q.push(a);
            }
        }
        if(res.size() != numCourses) return {};
        return res;
    }
};
