https://leetcode.com/problems/word-search-ii/
class Solution {
public:
    struct TrieNode
    {
        TrieNode *child[26];
        string str;
        TrieNode():str("")
        {
            for(auto &a:child) a=NULL;
        }
    };
    struct Trie
    {
        TrieNode *root;
        Trie():root(new TrieNode()){}
        void insert(string s)
        {
            TrieNode *p=root;
            for(auto &a:s)
            {
                int i=a-'a';
                if(!p->child[i]) p->child[i]=new TrieNode();
                p=p->child[i];
            }
            p->str=s;
        }
    };
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> res;
        if(words.empty()||board.size()==0||board[0].size()==0) return res;
        vector<vector<bool>> visit(board.size(),vector<bool>(board[0].size(),false));
        Trie T;
        for(auto &a:words) T.insert(a);
        for(int i=0;i<board.size();i++)
            for(int j=0;j<board[i].size();j++)
            {
                if(T.root->child[board[i][j]-'a'])
                {
                    serach(board, T.root->child[board[i][j]-'a'],i,j,visit,res);
                }
            }
        return res;
    }
    void serach(vector<vector<char>>&board, TrieNode *p, int i,int j,vector<vector<bool>>&visit, vector<string> &res)
    {
        if(!p->str.empty())
        {
            res.push_back(p->str);
            p->str.clear();
        }
        int d[][2]={{-1,0},{1,0},{0,-1},{0,1}};
        visit[i][j]=true;
        for(auto &a:d)
        {
            int nx=a[0]+i, ny=a[1]+j;
            if(nx>=0 &&nx<board.size()&&ny>=0 &&ny<board[0].size() &&!visit[nx][ny]&&p->child[board[nx][ny]-'a'])
            {
                serach(board,p->child[board[nx][ny]-'a'],nx,ny,visit,res);
            }
        }
        visit[i][j]=false;
    }
};

https://leetcode.com/problems/next-closest-time/
class Solution {
public:
    string nextClosestTime(string time) {
        string res="0000";
        vector<int> v{600,60,10,1};
        int found=time.find(":");
        int cur=stoi(time.substr(0,found))*60+stoi(time.substr(found+1));
        for(int i=1,d=0;i<=1440;++i)
        {
            int next=(cur+i)%1440;
            for(d=0;d<4;++d)
            {
                res[d]='0'+next/v[d];
                next%=v[d];
                if(time.find(res[d])==string::npos) break;
            }
            if(d>=4) break;
        }
        return res.substr(0,2)+":"+res.substr(2);
    }
};
