https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (!root || p == root || q == root) return root;
        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        TreeNode* right = lowestCommonAncestor(root->right, p, q);
        if (left && right) return root;
        return left? left : right;
    }
};

https://leetcode.com/problems/binary-search-tree-iterator/submissions/
class BSTIterator {
public:
    BSTIterator(TreeNode* root) {
        if (root) {
            TreeNode* cur = root;
            while(cur) {
                s.push(cur);
                cur = cur->left;
            }
        }
    }
    
    int next() {
        auto t = s.top(); s.pop();
        TreeNode* p = t->right;
        while(p) {
            s.push(p);
            p = p->left;
        }
        return t->val;
    }
    
    bool hasNext() {
        return !s.empty();
    }
private:
    stack<TreeNode*> s;
};
