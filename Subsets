https://leetcode.com/problems/subsets/
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> out;
        helper(nums, 0, out, res);
        return res;
    }
    void helper(vector<int>& nums, int idx, vector<int>& out, vector<vector<int>>& res) {
        res.push_back(out);
        for (int i = idx; i < nums.size(); i++) {
            out.push_back(nums[i]);
            helper(nums, i+1, out, res);
            out.pop_back();
        }
    }
};

https://leetcode.com/problems/subsets-ii/submissions/
class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<int> out;
        vector<vector<int>> res;
        helper(nums, 0, out, res);
        return res;
    }
    void helper(vector<int>& nums, int idx, vector<int>& out, vector<vector<int>> &res) {
        res.push_back(out);
        for (int i = idx; i < nums.size(); i++) {
            if ( i > idx && nums[i] == nums[i-1]) continue;
            out.push_back(nums[i]);
            helper(nums, i+1, out, res);
            out.pop_back();
        }
    }
};

https://leetcode.com/problems/word-break-ii/
class Solution {
public:
    unordered_map<string, vector<string>> m;
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        if (m.count(s)) return m[s];
        if (s.size() == 0) return {""};
        vector<string> res;
        for (auto word : wordDict) {
            if (s.substr(0, word.size()) != word) continue;
            vector<string> rem = wordBreak(s.substr(word.size()), wordDict);
            for (auto re : rem) {
                string t = word + (re.size() == 0? "" : " ") + re;
                res.push_back(t);
            }
        }
        m[s] = res;
        return res;
    }
};
