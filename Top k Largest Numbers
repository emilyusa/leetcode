https://www.lintcode.com/problem/top-k-largest-numbers/description
class Solution {
public:
    /**
     * @param nums: an integer array
     * @param k: An integer
     * @return: the top k largest numbers in array
     */
    vector<int> topk(vector<int> &nums, int k) {
        // write your code here
        priority_queue<int, vector<int>, comp> q;
        for (auto num : nums) {
            q.push(num);
            if (q.size() > k)
                q.pop();
        }
        vector<int> res;
        while(!q.empty()) {
            res.push_back(q.top());
            q.pop();
        }
        reverse(res.begin(), res.end());
        return res;
    }
private:
    struct comp {
        bool operator()(int & a, int & b) {
            return a > b;
        }
    };
};

https://www.lintcode.com/problem/top-k-largest-numbers-ii/description
class Solution {
public:
    /*
    * @param k: An integer
    */Solution(int k) {
        // do intialization if necessary
        cap = k;
    }

    /*
     * @param num: Number to be added
     * @return: nothing
     */
    void add(int num) {
        // write your code here
        q.push(num);
        if (q.size() > cap)
            q.pop();
    }

    /*
     * @return: Top k element
     */
    vector<int> topk() {
        // write your code here
        vector<int> res;
        priority_queue<int, vector<int>, comp> t = q;
        while(!t.empty()) {
            res.push_back(t.top());
            t.pop();
        }
        reverse(res.begin(), res.end());
        return res;
    }
private:
    struct comp{
        bool operator()(int& a, int& b) const {
            return a > b;
        }
    };
    priority_queue<int, vector<int>, comp> q;
    int cap;
};

https://leetcode.com/problems/middle-of-the-linked-list/submissions/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        if(!head->next) return head;
        ListNode* slow = head, *fast = head;
        while(fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
};
