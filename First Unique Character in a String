https://leetcode.com/problems/first-unique-character-in-a-string/
class Solution {
public:
    int firstUniqChar(string s) {
        unordered_map<int, int> m;
        for (auto ch : s) {
            m[ch]++;
        }
        for (int i = 0; i < s.size(); i++) {
            if (m[s[i]] == 1) 
                return i;
        }
        return -1;
    }
};

https://leetcode.com/problems/k-closest-points-to-origin/submissions/
class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
        int n = points.size();
        int l = 0, r = n - 1;
        while (l < r) {
            int p = partition(points, l, r);
            if (p < K - 1) {
                l = p + 1;
            } else if (p > K - 1) {
                r = p - 1;
            } else
                break;
        }
        return vector<vector<int>>(points.begin(), points.begin() + K);
    }
private:
    bool farther(vector<int>& a, vector<int>& b) {
        return a[0]*a[0]+a[1]*a[1] > b[0]*b[0] + b[1]*b[1];
    }
    
    bool closer(vector<int>& a, vector<int>& b) {
        return a[0]*a[0]+a[1]*a[1] < b[0]*b[0] + b[1]*b[1];
    }
    
    int partition(vector<vector<int>>& points, int left, int right) {
        int l = left + 1, r = right, p = left;
        while (l <= r) {
            if(farther(points[l],points[p]) && closer(points[r],points[p]))
                swap(points[l++], points[r--]);
            else if (!farther(points[l],points[p]))
                l++;
            else if (!closer(points[r],points[p]))
                r--;
        }
        swap(points[r], points[p]);
        return r;
    }
};

https://leetcode.com/problems/implement-queue-using-stacks/
class MyQueue {
public:
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        stack<int> t;
        while (!st.empty()) {
            t.push(st.top());
            st.pop();
        }
        st.push(x);
        while (!t.empty()) {
            st.push(t.top());
            t.pop();
        }
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int res = st.top();
        st.pop();
        return res;
    }
    
    /** Get the front element. */
    int peek() {
        return st.top();
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return st.size() == 0;
    }
private:
    stack<int> st;
};
