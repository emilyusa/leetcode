https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/submissions/
class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int m = matrix.size(), n = matrix[0].size();
        int l = matrix[0][0], r = matrix[m-1][n-1];
        while (l < r) {
            int mid = l + r >> 1;
            int cnt = 0;
            for (int i = 0; i < m; i++) {
                cnt += upper_bound(matrix[i].begin(), matrix[i].end(), mid) - matrix[i].begin();
            }
            if (cnt < k) {
                l = mid + 1;
            } else
                r = mid;
            
        }
        return l;
    }
};

https://leetcode.com/problems/moving-average-from-data-stream/submissions/
class MovingAverage {
public:
    /** Initialize your data structure here. */
    MovingAverage(int size) {
        cap = size;
        sum = 0;
    }
    
    double next(int val) {
        q.push_back(val);
        sum += val;
        if (q.size() > cap) {
            int t = *q.begin();
            q.pop_front();
            sum -= t;
        }
        return (double)sum/q.size();
    }
private:
    deque<int> q;
    int cap;
    int sum;
};

https://leetcode.com/problems/implement-stack-using-queues/
class MyStack {
public:
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        queue<int> t;
        while(!q.empty()) {
            t.push(q.front());
            q.pop();
        }
        q.push(x);
        while(!t.empty()) {
            q.push(t.front());
            t.pop();
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int res = q.front();
        q.pop();
        return res;
    }
    
    /** Get the top element. */
    int top() {
        return q.front();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return q.size() == 0;
    }
private:
    queue<int> q;
};
